<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd"
    default-autowire="byName" default-lazy-init="false">

    <http auto-config="true">
        <form-login login-page="/notLogin.jsp" authentication-failure-url="/loginFailure.jsp" default-target-url="/security/security!isLogin.do" />
        <logout logout-success-url="/security/security!isLogin.do" />
        <remember-me user-service-ref="userDetailsService"/>
    </http>

    <authentication-provider user-service-ref="userDetailsService">
        <password-encoder hash="md5"/>
    </authentication-provider>

    <authentication-manager alias="authenticationManager"/>

    <beans:bean id="passwordEncoder" class="org.springframework.security.providers.encoding.Md5PasswordEncoder" />

    <beans:bean id="httpSessionContextIntegrationFilter"
       class="org.springframework.security.context.HttpSessionContextIntegrationFilter">
        <beans:property name="contextClass" value="org.springframework.security.captcha.CaptchaSecurityContextImpl"/>
        <custom-filter position="FIRST"/>
    </beans:bean>

    <beans:bean id="captchaValidationProcessingFilter"
          class="org.springframework.security.captcha.CaptchaValidationProcessingFilter">
        <beans:property name="captchaService" ref="captchaService"/>
        <custom-filter before="CHANNEL_FILTER"/>
    </beans:bean>

    <beans:bean id="channelProcessingFilter" class="org.springframework.security.securechannel.ChannelProcessingFilter">
        <beans:property name="channelDecisionManager" ref="channelDecisionManager"/>
        <beans:property name="filterInvocationDefinitionSource">
            <beans:value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /j_spring_security_check=REQUIRES_CAPTCHA_ONCE_ABOVE_THRESHOLD_REQUESTS
            </beans:value>
        </beans:property>
        <custom-filter position="CHANNEL_FILTER"/>
    </beans:bean>

    <!--
         filterInvocationInterceptor在执行转向url前检查objectDefinitionSource中设定的用户权限信息
         过程：
         首先，objectDefinitionSource中定义了访问URL需要的属性信息(这里的属性信息仅仅是标志，告诉accessDecisionManager要用哪些voter来投票)
         然后，authenticationManager调用自己的provider来对用户的认证信息进行校验。
         最后，所有投票者根据用户持有认证和访问url需要的属性，调用自己的voter来投票，决定是否允许访问。
     -->
    <beans:bean id="filterInvocationInterceptor"
       class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="accessDecisionManager" ref="accessDecisionManager" />
        <beans:property name="objectDefinitionSource">
            <beans:bean class="com.family168.security.intercept.web.CacheBaseUrlDefinitionSource">
                <beans:property name="convertUrlToLowercaseBeforeComparison" value="true" />
                <beans:property name="useAntPath" value="true" />
                <beans:property name="protectAllResource" value="false"/>
                <beans:property name="acegiCacheManager" ref="acegiCacheManager" />
            </beans:bean>
        </beans:property>
        <custom-filter before="FILTER_SECURITY_INTERCEPTOR " />
    </beans:bean>
</beans:beans>
